<h2>종류</h2>

1) 일반 객체
 JS에서 제공하는 일반 객체 - 브라우저와 상관없이 동작
 
2) BOM(Browser Object Model)
브라우저 차원에서 제공하는 객체

3) DOM(Document Object Model)
HTML의 body 부분에 만드는 태그들을 사용하기 위한 객체

<h2>Document </h2>

https://www.w3schools.com/jsref/default.asp
https://devdocs.io/javascript

<h2> 일반 내장 객체 </h2>

1) Object
JS의 최상위 객체
JS에서는 모든 객체가 이 객체를 상속받음
객체 생성 방법

```
{attr : val ....}
new Object()
```

주요 속성이나 method
prototype 속성 : 이 속성에 데이터를 추가하면 모든 객체가 데이터를 사용할 수 있다.
toString method : 객체를 문자열로 변환하는 method로 출력하는 method에 객체 이름을 대입하면 자동으로 호출되는 method이다.

2) Number
숫자와 관련된 객체
객체를 생성할 때는 숫자를 직접 대입해도 되고 new Number(숫자 문자열)

3) Math
Java의 Math Class를 가져옴
JS의 난수 생성에 관하여 - 의사 난수  문제 : https://yceffort.kr/2021/09/javascript-random-number

4) String
문자열 class
생성 : "", ''안에 문자열  리터럴을 대입해서 생성할 수 있고 new String(문자열)을 이용하여 생성하는 것이 가능
length : 길이
charAt(index) : index번째의 문자를 반환
문자열 관련 작업 중 중요한 것
좌우 공백 제거
영문 대소문자 제거
특정한 패턴의 문자나 문자열의 존재 여부
불용어 사용 (쓰면 안되는 문자)
한글을 사용할 때는 인코딩 문제

Template Literal : 문자열 처리를 위한 템플릿
문자열과 데이터를 조합해서 문자열을 생성하기 위한 추가된 문법
<p>`문자열${데이터}` : 문자열에 안의 데이터를 문자열로 추가해서 문자열 생성
</p>
중간에 줄바꿈해도 된다.

5) Date
날짜와 관련된 클래스. 자바에서 가져왔다.
new Date() : 현재 날짜 및 시간
new Date(연, 월, 일, 시, 분, 초, 밀리초) : 입력한 데이터를 가지고 날짜 및 시간을 만들어냄. 월은 -1 해야함.
new Date(정수) : 1970년 1월 1일 (epoch Time)에서 지나온 시간을 밀리초 단위로 설정

메소드 : 각 단위 별로 가져오고 설정할 수 있는 method를 제공하고 현재 시간을 문자열로 리턴해주는 toGTMSTring, toLocaleString, toString Method ㅈ제공
getTime method를 이용하면 1970년 1월 1일 자정 이후로 지나온 시간을 밀리초 단위로 리턴

6) Array
배열 객체
다른 언어에서의 Linked List와 유사
배열의 크기가 고정이 아니고 데이터 추가 삭제 가능
생성
[데이터 나열]
new Array() : 배열 생성
new Array(데이터 개수) : 고정 개수 배열 생성
new Array(데이터 나열) : 데이터 있는 배열 생성
데이터 개수는 length로 제공
[인덱스]로 데이터 개별 접근 가능
0부터 length - 1까지

for in을 이용해서 모든 인덱스 접근 가능
for of로 모든 데이터 접근 가능

concat(배열): 배열 결합
reverse()
slice(start, end)

sort([정렬 함수]): 데이터 정렬

pop(): 마지막 데이터를 삭제하고 리턴
push(data): 데이터 추가
shift(): 첫 데이터를 삭제하고 리턴
unshift(data): 데이터를 맨 앞에 추가

remove(index): index 데이터 삭제

sorting(정렬): 
데이터를 순서대로 나열하는 것

asc : 오름차순. 작은 것 -> 큰 것
desc : 내림차순. 큰 것 -> 작은 것

종류
selection(선택)
bubble
insertion(삽입)
heap
quick
radix
merge
shell...
quick sort를 구현하고 설명할 수 있어야한다.

js에서 sort()는 숫자를 문자열로 변환해서 수행한다.

배열에 추가된 함수는 함수를 매개변수로 받는다
forEach(): 매개변수가 1개이고 리턴이 없는 함수를 매개변수를 받아 배열의 모든 요소를 매개변수에 대입해 함수를 호출한다.

map(): 매개변수가 1개이고 리턴을 하는 함수를 매개변수로 받아 배열의 모든 요소를 매개변수로 대입해 함수를 호출, 그 결과를 가지고 다시 배열을 만들어 리턴한다.

filter(): 매개변수가 1개이고 Boolean을 리턴하는 함수를 매개변수로 받아서 배열의 모든 요소를 매겨변수로 대입해서 함수를 호출, true를 리턴한 데이터만 모아 배열을 리턴한다.

every(): 매개변수가 1개이고 Boolean을 리턴하는 함수를 매개변수로 받아 배열의 모든 요소를 매개변수로 대입해서 함수를 호출, 모든 데이터가 true인지 확인후 Boolean으로 리턴한다.

some(): 매개변수가 1개이고 Boolean을 리턴하는 함수를 매개벼ㅕㄴ수로 받아서 배열의 모든 요소를 매개변수로 대입해서 함수를 호출, 1개라도 true를 리턴하는지 확인후 Boolean으로 리턴한다.

Java는 이를 위해 lambda와 stream이라고하는 API를 1.8에서 추가함.

JSON 객체
JSON(JavaScript Object Notation): 데이터를 JS으ㅣ 객체 표현법의 문자열로 만드는 것

현재 가장 많이 사용
JSON.parse(json 문자열)JSON 문자열을 JS 데이터로 변역해서 리턴. 서버에서 데이터 받아왔을 때 사용
stringify(JS data) : data를 json 문자열로 반환

RegExp(정규표현식) 객체
정규표현식
문자열의 패턴을 정의하기 위한 객체로 Perl에서 처음 사용
일반적으로 문자열 패턴을 찾거나 유효성 검사 위해 사용
장점 : 코드 단축 가능
단점 : 가독성 떨어짐

구성
pattern
modifier(한정자) : 제약조건을 설정
/패턴/한정자

함수
test(문자열) : 문자열에 정규표현식 패턴이 존재하는지 확인
exec(문자열) : 정규 표현식 문자열을 리턴

String의 정규 표현식 관련 method
match(정규표현식) : 정규 표현식과 일치하는 부분을 리턴
replace(정규표현식) : 정규표현식에 해당하는 부분을 replace
serach(정규표현식) : 정규표현식과 일치하는 부분의 Index 리턴
split(정규표현식) : 정규표현식과 일치하는 부분을 찾아서 잘라낸다음 배열로 리턴

한정자
g: 전체 영역에서 비교
i: 대소문자 구분없이 비교
m: 여러 줄에서 비교

앵커 문자
^패턴 : 패턴으로 시작하는
패턴$ : 패턴으로 끝나는

메타 문자
. : 아무 글자
[문자나열]: 문장 중 1개
[^문자]: 문자를 제외하고
[시작-끝]: 시작에서 끝에 포함되는 영문소문자[a-z], 영문대문자[A-Z], 영문대소문자[A-Za-z], 한글[가-힣], 숫자[0-9]
\d: 숫자, \D: 숫자가 아닌
\w: 단어, \W: 단어가 아닌
\s: 공백문자, \S: 공백문자가 아닌

수량 문자
+: 1개 이상
*: 0개 이상
?: 0개 또는 1개
{횟수}: 횟수
{최소, 최대}: 최소 ~ 최대
{최소, }: 최소 이상

Set
데이터를 중복없이 저장하는 자로구조
데이터를 가지고 key를 만들어 저장
이 때 Hashing을 수행해서 key를 만들어낸다.
Hashing은 데이터를 가지고 새로운 데이터를 만들어내는 것.
이렇게 만들어진 코드를 HashCode라고 한다.
데이터가 같으면 HashCode는 같다.
HashCode가 같다고 해서 데이터가 같지는 않다. 확률적으로는 아주 드물다.
HashCode를 가지고 원본 데이터를 찾는 것도 아주 어렵다.

생성
new Set()
new Set(Array)

함수
add, has, keys, values, delete, clear 등
for를 이용해서 순회가능
JS에서는 저장한 순서대로 접근
다른 언어에서는 기억못함
> 
SQL Injection 관련 문제 : https://namu.wiki/w/SQL%20injection
대응 기법 : http://blog.plura.io/?p=6056
왜 PSTMT가 안전한지? : https://webstone.tistory.com/50


